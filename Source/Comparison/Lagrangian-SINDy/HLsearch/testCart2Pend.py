g=9.81
mp1=1.0
mp2=1.0
mc=1.0
L1=1.0
L2=1.0

def cart2Pend(t,y,force=1.0):
    theta1, theta1_t, theta2, theta2_t, x, x_t = y
    th1_2t,th2_2t,x_2t = (-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))*(-L2*g*mp2*np.sin(theta2) + mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t + 2*L2*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta2) + 2*L2*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta2) - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))*(-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2)/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) - (L2*mp2*np.cos(theta2) - mp2*(L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))*(L1*mp1*np.sin(theta1)*theta1_t**2 - mp2*(-2*L1*np.sin(theta1)*theta1_t**2 - 2*L2*np.sin(theta2)*theta2_t**2)/2 - (L2*mp2*np.cos(theta2) - mp2*(L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))*(-L2*g*mp2*np.sin(theta2) + mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t + 2*L2*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta2) + 2*L2*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta2) - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))*(-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2)/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))/(-mp2**2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))**2/(4*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) + mp2*(2*L2**2*np.sin(theta2)**2 + 2*L2**2*np.cos(theta2)**2)/2) + force*np.cos(theta1) - (L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2)/(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2))/(mc + mp1 + mp2 - (L2*mp2*np.cos(theta2) - mp2*(L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))**2/(-mp2**2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))**2/(4*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) + mp2*(2*L2**2*np.sin(theta2)**2 + 2*L2**2*np.cos(theta2)**2)/2) - (L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))**2/(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))/(2*(-mp2**2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))**2/(4*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) + mp2*(2*L2**2*np.sin(theta2)**2 + 2*L2**2*np.cos(theta2)**2)/2)) - (L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(L1*mp1*np.sin(theta1)*theta1_t**2 - mp2*(-2*L1*np.sin(theta1)*theta1_t**2 - 2*L2*np.sin(theta2)*theta2_t**2)/2 - (L2*mp2*np.cos(theta2) - mp2*(L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))*(-L2*g*mp2*np.sin(theta2) + mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t + 2*L2*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta2) + 2*L2*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta2) - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))*(-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2)/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))/(-mp2**2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))**2/(4*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) + mp2*(2*L2**2*np.sin(theta2)**2 + 2*L2**2*np.cos(theta2)**2)/2) + force*np.cos(theta1) - (L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2)/(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2))/(mc + mp1 + mp2 - (L2*mp2*np.cos(theta2) - mp2*(L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))**2/(-mp2**2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))**2/(4*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) + mp2*(2*L2**2*np.sin(theta2)**2 + 2*L2**2*np.cos(theta2)**2)/2) - (L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))**2/(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))/(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2),(-L2*g*mp2*np.sin(theta2) + mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t + 2*L2*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta2) + 2*L2*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta2) - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))*(-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2)/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) - (L2*mp2*np.cos(theta2) - mp2*(L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))*(L1*mp1*np.sin(theta1)*theta1_t**2 - mp2*(-2*L1*np.sin(theta1)*theta1_t**2 - 2*L2*np.sin(theta2)*theta2_t**2)/2 - (L2*mp2*np.cos(theta2) - mp2*(L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))*(-L2*g*mp2*np.sin(theta2) + mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t + 2*L2*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta2) + 2*L2*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta2) - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))*(-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2)/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))/(-mp2**2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))**2/(4*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) + mp2*(2*L2**2*np.sin(theta2)**2 + 2*L2**2*np.cos(theta2)**2)/2) + force*np.cos(theta1) - (L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2)/(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2))/(mc + mp1 + mp2 - (L2*mp2*np.cos(theta2) - mp2*(L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))**2/(-mp2**2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))**2/(4*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) + mp2*(2*L2**2*np.sin(theta2)**2 + 2*L2**2*np.cos(theta2)**2)/2) - (L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))**2/(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))/(-mp2**2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))**2/(4*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) + mp2*(2*L2**2*np.sin(theta2)**2 + 2*L2**2*np.cos(theta2)**2)/2),(L1*mp1*np.sin(theta1)*theta1_t**2 - mp2*(-2*L1*np.sin(theta1)*theta1_t**2 - 2*L2*np.sin(theta2)*theta2_t**2)/2 - (L2*mp2*np.cos(theta2) - mp2*(L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))*(-L2*g*mp2*np.sin(theta2) + mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L2*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta2)*theta2_t + 2*L2*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta2) + 2*L2*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta2) - 2*L2*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta2)*theta2_t)/2 - mp2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))*(-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2)/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))/(-mp2**2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))**2/(4*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) + mp2*(2*L2**2*np.sin(theta2)**2 + 2*L2**2*np.cos(theta2)**2)/2) + force*np.cos(theta1) - (L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(-L1*g*mp1*np.sin(theta1) - L1*g*mp2*np.sin(theta1) + mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2 - mp2*(2*L1*(L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)*np.cos(theta1)*theta1_t + 2*L1*(-L1*np.sin(theta1)*theta1_t**2 - L2*np.sin(theta2)*theta2_t**2)*np.cos(theta1) + 2*L1*(L1*np.cos(theta1)*theta1_t**2 + L2*np.cos(theta2)*theta2_t**2)*np.sin(theta1) - 2*L1*(L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)*np.sin(theta1)*theta1_t)/2)/(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2))/(mc + mp1 + mp2 - (L2*mp2*np.cos(theta2) - mp2*(L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))/(2*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)))**2/(-mp2**2*(2*L1*L2*np.sin(theta1)*np.sin(theta2) + 2*L1*L2*np.cos(theta1)*np.cos(theta2))**2/(4*(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2)) + mp2*(2*L2**2*np.sin(theta2)**2 + 2*L2**2*np.cos(theta2)**2)/2) - (L1*mp1*np.cos(theta1) + L1*mp2*np.cos(theta1))**2/(mp1*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2 + mp2*(2*L1**2*np.sin(theta1)**2 + 2*L1**2*np.cos(theta1)**2)/2))
    return theta1_t, th1_2t, theta2_t, th2_2t,x_t,x_2t
from HLsearch import *
from scipy.integrate import solve_ivp
from scipy import stats
import numpy as np
from sympy import symbols, var, diff, simplify, collect,solve
from sympy.utilities.lambdify import lambdify, implemented_function

from operator import add,sub,mul

import itertools

import time

def generate_data(func, time, init_values):
    sol = solve_ivp(func,[time[0],time[-1]],init_values,t_eval=time, method='RK45',rtol=1e-10,atol=1e-10)
    return sol.y.T, np.array([func(0,sol.y.T[i,:]) for i in range(sol.y.T.shape[0])],dtype=np.float64)

t = np.arange(0,1,0.01)
y0=np.array([np.pi/4, 0,0, 0,0,0])
X,Xdot = generate_data(cart2Pend,t,y0)

def energy(X):
    theta1, theta1_t,theta2,theta2_t,x,x_t = np.hsplit(X,6)
    return - L1*g*mp1*np.cos(theta1) + g*mp2*(-L1*np.cos(theta1) - L2*np.cos(theta2)) + mc*x_t**2/2 + mp1*(L1**2*np.sin(theta1)**2*theta1_t**2 + (L1*np.cos(theta1)*theta1_t + x_t)**2)/2 + mp2*((L1*np.sin(theta1)*theta1_t + L2*np.sin(theta2)*theta2_t)**2 + (L1*np.cos(theta1)*theta1_t + L2*np.cos(theta2)*theta2_t + x_t)**2)/2

print((energy(X[1:])-energy(X[:-1]))/0.01)
print(X[:,5])

data_description = ()
for i in range(round(X.shape[1]/2)):
    data_description = data_description + symbols('x{}, x{}_t'.format(i,i))
print('Variables are:',data_description)
data_description_sym = data_description
print(data_description_sym)
data_description = list(str(descr) for descr in data_description)

expr_new0 = buildFunctionExpressions(1,2,data_description[0:2],use_sine=True)
expr_new1 = buildFunctionExpressions(1,2,data_description[2:4],use_sine=True)
expr_new2 = buildFunctionExpressions(1,2,data_description[4:6],use_sine=False)

print(expr_new0[1:])
print(expr_new1[1:])
print(expr_new2)
expr_new = expr_new0[1:]+expr_new1[1:]+expr_new2

expr = buildFunctionExpressions(4,len(expr_new),expr_new)
for i,expr_new_item in enumerate(expr):
    if expr_new_item == 'x0_t*sin(x0)*x1_t*sin(x1)' or expr_new_item == 'x0_t*cos(x0)*x1_t*cos(x1)' or expr_new_item == 'x2_t**2' or expr_new_item == 'x0_t*cos(x0)*x2_t' or expr_new_item == 'x1_t*cos(x1)*x2_t':
        print(i,expr_new_item)

print(len(expr),' terms are: ',expr)

Theta = buildTimeSerieMatrixFromFunctions(X,expr, data_description)

Gamma = buildTimeDerivativeMatrixFromFunctions(X,Xdot,expr,data_description)

energyChange = 1.0*X[:,5]

stored_indices = (2,5,8,17,210,247,43,131,146)
for i in stored_indices:
    print('Keeping: ',expr[i])
elements = tuple(x for x in range(len(expr)) if x not in stored_indices)
indices = itertools.combinations(elements, 1)

def countNumberOfElementsLargerThanThreshold(x,threshold = 1e-8):
    count = 0
    for i in range(len(x)):
        if abs(x[i]) > threshold:
            count = count +1
    return count
start = time.time()
# for count,index in enumerate(indices):
#     index_tup = index + stored_indices
#     xi, sumResidual = np.linalg.lstsq(Gamma[:,index_tup], energyChange,rcond=None)[:2]
#     if sumResidual.size==0 or sumResidual>1e-8: continue
#     if countNumberOfElementsLargerThanThreshold(xi)<=2: continue
#     # if np.var(Gamma[:,index_tup]@xi-energyChange) > 1e-5: continue
#     xi = np.around(xi,decimals=6)
#     expr_temp = [expr[i] for i in index_tup]
#     Hamiltonian = generateExpression(xi,expr_temp,threshold=1e-8)
#     print('Total Energy = ',Hamiltonian)
#     # u, s, vh = np.linalg.svd(0*Theta-Gamma,full_matrices=False)

#     # xi = vh.T[:,-1]

#     # print('{} coefficients ='.format(xi.shape[0]),xi)
# # print('Total Energy = ',Hamiltonian)
# print('Elapsed time: ',time.time()-start)     

xi, sumResidual = np.linalg.lstsq(Gamma[:,stored_indices], energyChange,rcond=None)[:2]
print(xi)
print(sumResidual)
xi = np.around(xi,decimals=2)
expr_temp = [expr[i] for i in stored_indices]
Hamiltonian = generateExpression(xi,expr_temp,threshold=1e-8)
print('Total Energy = ',Hamiltonian)